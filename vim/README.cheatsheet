TODO:
----
Is it possible to create a horizontal scroll bar in vim as well as gvim?

Monitor development on neovim @ neovim.org (crowdsourced vim revamp so modern GUI and extensible plugins can be written for it)
It started around April, 2014.

Install one of the following status bar managers:
    vim-airline         https://github.com/bling/vim-airline        (Very light & fast. 100% vimscript)
    vim-powerline       https://github.com/Lokaltog/vim-powerline   (Deprecated in favor of 'powerline')
    powerline           https://github.com/Lokaltog/powerline
                        Written in python at the core and exposes various bindings such that it
                        can style status lines not only in vim, but also tmux, bash, zsh, and others.
Should probably install 'powerline'.

Change word boundary: _ should be considered as part of a word.
                      -, in certain file types, should also be considered as part of a word
                      This setting will affect the way 'Shift+*', 'dw', 'cw', etc. work.
                      Two solutions, with slightly different behavior:
                      1) While in vim, ':set isk+=_' adds '_' to be part of word.
                         Can add as many characters as you want, one at a time.
                         Using ':set isk-=_' will remove '_' from being considered as part of a word.
                         This affects 'w', 'b', 'e' as well as shortcuts such as 'Shift+*'.
                         isk is short for 'iskeyword'.
                         This solution has the undesired side-effect of breaking auto completion.
                      2) Download and install 'camelcase motion plugin' at
                         http://www.vim.org/scripts/script.php?script%5Fid=1905
                         Usage, installation, etc. are all on the page.
                      Implement solution (1) in .vimrc as two functions (map to <F4> and <F5>):
                      <F4>x =>      :set isk+=x
                      <F5>x =>      :set isk-=x
                      Ideally, implement a single function that toggles: If x is already in isk,
                      then remove it; and vice versa.

                      Depending on file type, execute this at startup:
                      - latex => isk+=: isk+=_ isk+=\

Parse *.prj & load all files into a new (g)vim with a module hierarchy view (requires parsing
the input files and associating instantiations, i.e. module names, to files where their definitions
and/or implementations appear). Do this for (sys) verilog only.

My vim (on specific hosts?) has the problem of going into insert mode when '0' is pressed
after certain operations (after being in insert mode, hit Esc, then '0' is back to insert?).
gvim does not have this problem. Fix this.

Investigate vim 'sessions' and write about it here.


====================================================================================================
Ctrl+v activates visual column editing mode
,           " Currently set as the <leader>. Take a look at vimrc files for its use.

viw         " Select word in visual mode starting where the cursor is until the word boundary is reached

:set nonu   " Disable line numbering so I can select text with l-mouse without line numbers :)


"pyy        " Copy current line into buffer 'p'  (p is arbitrary. Can be any letter or number or even signs like +, -, etc.).
            " This buffer can now be used in other vim processes as well.
"pp         " Paste what is in the buffer 'p'    (The first p refers to the buffer p)

[Ctrl+]v    " See below
select text " See below
"py         " Yank the selection into buffer 'p' (p is arbitrary. Can be any letter or number or even signs like +, -, etc.).
            " This buffer can now be used in other vim processes as well.
"pp         " Paste what is in the buffer 'p'    (The frist p refers to the buffer p)


30|         " Jump to column 30 on the current line. Works only if there is at least 30 characters on the line

gqap        " Indent the paragraph where the cursor is at. Blank lines are the borders of the paragraph.
            " By default, 80 column is used.  To change it, :set textwidth=90

.\{-}       " Non-greedy search, equivalent to '.*' in standard regexp.

qa          " Start record macro 'a'. When done, hit q again to stop recording.
            " Macros can call/execute other macros.
"ap         " Do this on a blank line. It pastes what was recorded in buffer 'a' (could be the macro just recorded).
            " You can now change it. Then, select it in visual mode: 0 v $ h
            " Now, copy it over the same buffer (a): "ay
@a          " Execute macro 'a' once.
10@a        " Execute macro 'a' 10 times.

Ctrl+w s    " Split horizontally
Ctrl+w v    " Split vertically
Ctrl+w c    " Close the 'window' (if split) where the cursor is
Ctrl+w o    " Close all the 'window's (if split) other than where the cursor is

5 s         " Deletes 5 characters forward starting with the one under the cursor and leaves you in insert mode.
            " <=> 5 x i

g Ctrl+G    " Provides various statistics about the line & character under the cursor: Character position, total
            " character count (of the line and file), etc.

gf          " Open the path/file that is under the cursor (assuming it is a valid path/name).
            " Did not test this on path/file containing space in it - probably don't care, though :)

an          " My shortcut (see .vimrc) for ':bn', which shows the file in the "next" buffer (n is for next)
ap          " My shortcut (see .vimrc) for ':bp', which shows the file in the "prev" buffer (p is for previous)

====================================================================================================
In order to view files in a nice fixed size font, take these steps:
a) Install ProggyCleanTT (there are many other fonts, but this one looks
   pretty nice) to your system:  http://www.proggyfonts.com/ ->
   Download ProggyCleanTT (ttf). Unzip it into ~/.fonts/*, then run "fc-cache".
b) 'set guifont=ProggyCleanTTSZBP\ 12' in .gvimrc will make gvim use that font.
   This line does not affect vim as vim uses fonts that the xterm can display.
Note that this font can display charsets defined in ISO-8859-1, i.e. English characters.
Some Turkish characters can't be displayed properly - Turkish characters can
be completely displayed if a font can handle ISO-8859-9 charset.

In order to view/edit a file with Turkish characters in it, do this:
a) On xterm, 'export LANG=tr_TR.UTF-8'
b) Run 'gedit' to edit the file.
c) Once done, set LANG back to 'en_US.UTF-8' (default language type) on that xterm.
Note that
a) gedit saves file using character encodings in UTF-8 (can be displayed
   properly by web browsers)
b) You must have turned on Turkish language support on that linux system before
   the steps above can succeed. To turn on the support on Ubuntu GNOME Desktop,
   use System->Administration->Language Support. Add Turkish.  You do not need
   to designate it as default. It is because of this that export LANG=.. is
   required before starting gedit.

- The linux command 'locale' displays current locale settings on that xterm.
  You can see what LANG is the current setting as well as many other settings.
- The (g)vim command :language display the current language setting that (g)vim
  uses. It can also be used to change the language. However, without a proper
  font installed on the linux system, (g)vim will not display files with
  Turkish characters in them correctly (unlike gedit). If there is a proper
  font installed on the system, setting the locale (i.e. LANG on the xterm)
  will automatically set encoding properly as well and after that (g)vim should
  automatically display all Turkish characters properly. As of 2008.11.15, I
  could not find a font that could display Turkish characters, therefore I
  cannot confirm this theory.

====================================================================================================
Tabs in (g)vim can be opened by typing :tabnew
Once a tab is open, file can be opened by typing :e <file>
gt is a shortcut for cycling through open tabs.
As of December 2013, gbuf (a perl script) is an excellent alternative to using tabs in gvim.

